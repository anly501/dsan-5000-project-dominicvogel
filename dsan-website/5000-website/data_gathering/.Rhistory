quarto render --
--quarto render
quarto render
install.packages("devtools")
devtools::install_github("ibenz730/ncaahoopR")
install.packages("devtools")
install.packages("devtools")
devtools::install_github("ibenz730/ncaahoopR")
install.packages("devtools")
devtools::install_github("lbenz730/ncaahoopR")
library(ncaahoopR)
install.packages("toRvik")
install.packages("toRvik")
install.packages("Rtools")
install.packages("toRvik")
install.packages("Rtools")
install.packages("toRvik")
install.packages("toRvik")
install.packages("hoopR")
library(hoopR)
kp_efficiency(2000)
library(hoopR)
Sys.getenv(KP_USER = "davogel2001@gmail.com")
library(hoopR)
Sys.setenv(KP_USER = "davogel2001@gmail.com")
Sys.setenv(KP_PW= "rays#3mlb8")
library(hoopR)
kp_efficiency(2000)
library(hoopR)
login(user_email = Sys.getenv("KP_USER"), user_pw = Sys.getenv("KP_PW"))
library(hoopR)
login(user_email = Sys.getenv("KP_USER"), user_pw = Sys.getenv("KP_PW"))
library(hoopR)
login(user_email = Sys.getenv(KP_USER), user_pw = Sys.getenv(KP_PW))
library(hoopR)
Sys.setenv(KP_USER = "davogel2001@gmail.com")
Sys.setenv(KP_PW = "rays#3mlb8")
login(user_email = Sys.getenv("KP_USER"), user_pw = Sys.getenv("KP_PW"))
library(hoopR)
Sys.setenv(KP_USER = "davogel2001@gmail.com")
Sys.setenv(KP_PW = "rays#3mlb8")
login(user_email = Sys.getenv("KP_USER"), user_pw = Sys.getenv("KP_PW"))
usethis::edit_r_environ()
library(hoopR)
login(user_email = Sys.getenv("KP_USER"), user_pw = Sys.getenv("KP_PW"))
usethis::edit_r_environ()
install.packages("rlang")
reticulate::repl_python()
barttorvik_df = pd.read_csv("barttorvik_2023.csv")
barttorvik_df.columns = ['Team', 'Conf', 'Record', 'AdjOE', 'OERank', 'AdjDE', 'DERank', 'Barthag', 'Rank', 'ProjW', 'ProjL', 'ProConW', 'ProConL', 'ConRec', 'SOS', 'NCSOS', 'Consos', 'ProjSOS', 'ProjNonconSOS', 'ProjConSOS', 'EliteSOS', 'EliteNonconSOS', 'OppOE', 'OppDE', 'OppProjOE', 'OppProjDE', 'ConAdjOE','ConAdjDE', 'QualO', 'QualD', 'QualBarthag', 'QualGames', 'FUN', 'ConPF','ConPA', 'ConPoss', 'ConOE', 'ConDE', 'ConSOSRemain', 'ConfWinPct', 'WAB', 'WABRk', 'FunRk', 'AdjT']
print(barttorvik_df.head())
barttorvik_df.to_csv("barttorvik_2023.csv", index= False)
quit
#| echo: false
library(ncaahoopR)
creighton <- get_pbp("Creighton", "2022-23")
head(creighton[, 1:5], 10)
cat("Number of rows:", nrow(creighton), "\n")
cat("Number of columns:", ncol(creighton), "\n")
library(dplyr)
creighton_change <- creighton %>% filter(scoring_play == TRUE,
win_prob >= lag(win_prob, default = first(win_prob)) + .2 |
win_prob <= lag(win_prob, default = first(win_prob)) - .2)
head(creighton_change[, 1:5], 10)
reticulate::repl_python()
#Imports
import pandas as pd
import numpy as np
import requests
import csv
#| echo: false
csv_url = "http://barttorvik.com/2023_team_results.csv"
local_filename = "barttorvik_2023.csv"
response = requests.get(csv_url)
if response.status_code == 200:
with open(local_filename, 'wb') as outfile:
outfile.write(response.content)
else:
print("Failed to retrieve the file. Status code:", response.status_code)
barttorvik_df = pd.read_csv("barttorvik_2023.csv")
barttorvik_df.columns = ['Team', 'Conf', 'Record', 'AdjOE', 'OERank', 'AdjDE', 'DERank', 'Barthag', 'Rank', 'ProjW', 'ProjL', 'ProConW', 'ProConL', 'ConRec', 'SOS', 'NCSOS', 'Consos', 'ProjSOS', 'ProjNonconSOS', 'ProjConSOS', 'EliteSOS', 'EliteNonconSOS', 'OppOE', 'OppDE', 'OppProjOE', 'OppProjDE', 'ConAdjOE','ConAdjDE', 'QualO', 'QualD', 'QualBarthag', 'QualGames', 'FUN', 'ConPF','ConPA', 'ConPoss', 'ConOE', 'ConDE', 'ConSOSRemain', 'ConfWinPct', 'WAB', 'WABRk', 'FunRk', 'AdjT']
print(barttorvik_df.head())
barttorvik_df.to_csv("barttorvik_2023.csv", index= False)
quit
#| echo: false
library(hoopR)
user_email <- Sys.getenv("KP_USER")
user_pw <- Sys.getenv("KP_PW")
has_kp_user_and_pw()
reticulate::repl_python()
kenpom_df = pd.read_csv("../data/summary23.csv")
print(kenpom_df.head())
quit
library(dplyr)
creighton_change <- creighton %>% filter(scoring_play == TRUE,
win_prob >= lag(win_prob, default = first(win_prob)) + .2 |
win_prob <= lag(win_prob, default = first(win_prob)) - .2)
head(creighton_change[, 1:5], 10)
creighton <- read.csv("creighton_2022_23.csv")
creighton <- read.csv("creighton_2022_23.csv")
creighton <- read.csv("../data/creighton_2022_23.csv")
head(creighton)
#| echo: false
library(ncaahoopR)
creighton <- get_pbp("Creighton", "2022-23")
write.csv(creighton, file = "../data/creighton_2022_23.csv", index = FALSE)
#| echo: false
library(ncaahoopR)
creighton <- get_pbp("Creighton", "2022-23")
write.csv(creighton, file = "../data/creighton_2022_23.csv", row.names = FALSE)
head(creighton[, 1:5], 10)
cat("Number of rows:", nrow(creighton), "\n")
cat("Number of columns:", ncol(creighton), "\n")
library(dplyr)
creighton_change <- creighton %>% filter(scoring_play == TRUE,
win_prob >= lag(win_prob, default = first(win_prob)) + .2 |
win_prob <= lag(win_prob, default = first(win_prob)) - .2)
head(creighton_change[, 1:5], 10)
reticulate::repl_python()
#Imports
import pandas as pd
import numpy as np
import requests
import csv
#| echo: false
csv_url = "http://barttorvik.com/2023_team_results.csv"
local_filename = "barttorvik_2023.csv"
response = requests.get(csv_url)
if response.status_code == 200:
with open(local_filename, 'wb') as outfile:
outfile.write(response.content)
else:
print("Failed to retrieve the file. Status code:", response.status_code)
barttorvik_df = pd.read_csv("barttorvik_2023.csv")
barttorvik_df.columns = ['Team', 'Conf', 'Record', 'AdjOE', 'OERank', 'AdjDE', 'DERank', 'Barthag', 'Rank', 'ProjW', 'ProjL', 'ProConW', 'ProConL', 'ConRec', 'SOS', 'NCSOS', 'Consos', 'ProjSOS', 'ProjNonconSOS', 'ProjConSOS', 'EliteSOS', 'EliteNonconSOS', 'OppOE', 'OppDE', 'OppProjOE', 'OppProjDE', 'ConAdjOE','ConAdjDE', 'QualO', 'QualD', 'QualBarthag', 'QualGames', 'FUN', 'ConPF','ConPA', 'ConPoss', 'ConOE', 'ConDE', 'ConSOSRemain', 'ConfWinPct', 'WAB', 'WABRk', 'FunRk', 'AdjT']
print(barttorvik_df.head())
barttorvik_df.to_csv("../data/barttorvik_2023.csv", index= False)
quit
#| echo: false
library(hoopR)
user_email <- Sys.getenv("KP_USER")
user_pw <- Sys.getenv("KP_PW")
has_kp_user_and_pw()
reticulate::repl_python()
kenpom_df = pd.read_csv("../data/summary23.csv")
print(kenpom_df.head())
quit
creighton <- read.csv("../data/creighton_2022_23.csv")
head(creighton)
library(dplyr)
creighton <- creighton %>% select(home, away, secs_remaining_absolute, description, score_diff, scoring_play, win_prob)
creighton <- read.csv("../data/creighton_2022_23.csv")
head(creighton)
library(dplyr)
creighton_cleaned <- creighton %>% select(home, away, secs_remaining_absolute, description, score_diff, scoring_play, win_prob)
library(dplyr)
creighton_cleaned <- creighton %>% select(home, away, secs_remaining_absolute, description, score_diff, scoring_play, win_prob)
creighton_cleaned$time_left <- round(creighton_cleaned$secs_remaining_absolute / 60, 2)
library(dplyr)
creighton_cleaned <- creighton %>% select(home, away, secs_remaining_absolute, description, score_diff, scoring_play, win_prob)
creighton_cleaned$time_left <- round(creighton_cleaned$secs_remaining_absolute / 60, 2)
creighton_cleaned.head()
library(dplyr)
creighton_cleaned <- creighton %>% select(home, away, secs_remaining_absolute, description, score_diff, scoring_play, win_prob)
creighton_cleaned$time_left <- round(creighton_cleaned$secs_remaining_absolute / 60, 2)
head(creighton_cleaned)
library(dplyr)
creighton_cleaned <- creighton %>% select(home, away, secs_remaining_absolute, description, score_diff, scoring_play, win_prob)
creighton_cleaned$time_left_mins <- round(creighton_cleaned$secs_remaining_absolute / 60, 2)
creighton_cleaned <- creighton %>% select(-secs_remaining_absolute)
head(creighton_cleaned)
library(dplyr)
creighton_cleaned <- creighton %>% select(home, away, secs_remaining_absolute, description, score_diff, scoring_play, win_prob)
creighton_cleaned$time_left_mins <- round(creighton_cleaned$secs_remaining_absolute / 60, 2)
creighton_cleaned <- creighton %>% select(-secs_remaining_absolute)
head(creighton_cleaned)
library(dplyr)
creighton_cleaned <- creighton %>% select(home, away, secs_remaining_absolute, description, score_diff, scoring_play, win_prob)
creighton_cleaned$time_left_mins <- round(creighton_cleaned$secs_remaining_absolute / 60, 2)
creighton_cleaned <- creighton %>% select(-secs_remaining_absolute)
head(creighton_cleaned)
names(creighton)
library(dplyr)
creighton_cleaned <- creighton %>% select("home", "away", "secs_remaining_absolute", "description", "score_diff", "scoring_play", "win_prob")
creighton_cleaned$time_left_mins <- round(creighton_cleaned$secs_remaining_absolute / 60, 2)
creighton_cleaned <- creighton %>% select(-secs_remaining_absolute)
head(creighton_cleaned)
names(creighton)
library(dplyr)
creighton_cleaned <- creighton %>%
select(home, away, secs_remaining_absolute, description, score_diff, scoring_play, win_prob)
creighton_cleaned$time_left_mins <- round(creighton_cleaned$secs_remaining_absolute / 60, 2)
creighton_cleaned <- creighton %>% select(-secs_remaining_absolute)
write.csv(creighton_cleaned, "creighton_cleaned.csv", row.names = FALSE)
library(dplyr)
creighton_cleaned <- creighton %>%
select(home, away, secs_remaining_absolute, description, score_diff, scoring_play, win_prob)
creighton_cleaned$time_left_mins <- round(creighton_cleaned$secs_remaining_absolute / 60, 2)
creighton_cleaned <- creighton %>% select(-secs_remaining_absolute)
creighton_cleaned
write.csv(creighton_cleaned, "creighton_cleaned.csv", row.names = FALSE)
creighton_cleaned$time_left_mins <- round(creighton_cleaned$secs_remaining_absolute / 60, 2)
creighton_cleaned <- creighton %>%
select(home, away, secs_remaining_absolute, description, score_diff, scoring_play, win_prob)
creighton_cleaned$time_left_mins <- round(creighton_cleaned$secs_remaining_absolute / 60, 2)
creighton_cleaned <- creighton %>% select(-secs_remaining_absolute)
creighton_cleaned
creighton <- read.csv("../data/creighton_2022_23.csv")
head(creighton)
library(dplyr)
creighton_cleaned <- creighton %>%
select(home, away, secs_remaining_absolute, description, score_diff, scoring_play, win_prob)
creighton_cleaned$time_left_mins <- round(creighton_cleaned$secs_remaining_absolute / 60, 2)
creighton_cleaned <- creighton %>% select(-secs_remaining_absolute)
write.csv(creighton_cleaned, "../data/creighton_cleaned.csv", row.names = FALSE)
library(dplyr)
creighton_cleaned <- creighton %>%
select(home, away, secs_remaining_absolute, description, score_diff, scoring_play, win_prob)
creighton_cleaned$time_left_mins <- round(creighton_cleaned$secs_remaining_absolute / 60, 2)
creighton_cleaned <- creighton %>% select(-secs_remaining_absolute)
write.csv(creighton_cleaned, "../data/creighton_cleaned.csv", row.names = FALSE)
creighton_cleaned
library(dplyr)
creighton_cleaned <- creighton %>%
select(home, away, secs_remaining_absolute, description, score_diff, scoring_play, win_prob) %>%
mutate(time_left_mins = round(secs_remaining_absolute / 60, 2)) %>%
select(-secs_remaining_absolute)
write.csv(creighton_cleaned, "../data/creighton_cleaned.csv", row.names = FALSE)
library(dplyr)
creighton_cleaned <- creighton %>%
select(home, away, secs_remaining_absolute, description, score_diff, scoring_play, win_prob) %>%
mutate(time_left_mins = round(secs_remaining_absolute / 60, 2)) %>%
select(-secs_remaining_absolute)
write.csv(creighton_cleaned, "../data/creighton_cleaned.csv", row.names = FALSE)
creighton_cleaned
library(dplyr)
creighton_cleaned <- creighton %>%
select(home, away, secs_remaining_absolute, description, score_diff, scoring_play, win_prob) %>%
mutate(time_left_mins = round(secs_remaining_absolute / 60, 2)) %>%
select(-secs_remaining_absolute)
write.csv(creighton_cleaned, "../data/creighton_cleaned.csv", row.names = FALSE)
library(dplyr)
creighton_cleaned <- creighton %>%
select(home, away, secs_remaining_absolute, description, score_diff, scoring_play, win_prob) %>%
mutate(time_left_mins = round(secs_remaining_absolute / 60, 2)) %>%
select(-secs_remaining_absolute)
write.csv(creighton_cleaned, "../data/creighton_cleaned.csv", row.names = FALSE)
library(dplyr)
creighton_cleaned <- creighton %>%
select(home, away, secs_remaining_absolute, description, score_diff, scoring_play, win_prob) %>%
mutate(time_left_mins = round(secs_remaining_absolute / 60, 2)) %>%
select(-secs_remaining_absolute)
write.csv(creighton_cleaned, "../data/creighton_cleaned.csv", row.names = FALSE)
head(creighton_cleaned[, 1:5], 10)
creighton <- read.csv("../data/creighton_2022_23.csv")
head(creighton)
library(dplyr)
creighton_cleaned <- creighton %>%
select(home, away, secs_remaining_absolute, description, score_diff, scoring_play,win_prob) %>%
mutate(time_left_mins = round(secs_remaining_absolute / 60, 2)) %>%
select(-secs_remaining_absolute)
write.csv(creighton_cleaned, "../data/creighton_cleaned.csv", row.names = FALSE)
head(creighton_cleaned[, 1:5], 10)
library(dplyr)
creighton_cleaned <- creighton %>%
select(home, away, secs_remaining_absolute, description, score_diff, scoring_play, win_prob) %>%
mutate(time_left_mins = round(secs_remaining_absolute / 60, 2)) %>%
select(-secs_remaining_absolute)
write.csv(creighton_cleaned, "../data/creighton_cleaned.csv", row.names = FALSE)
head(creighton_cleaned[, 1:5], 10)
library(dplyr)
creighton_cleaned <- creighton %>%
select(home, away, secs_remaining_absolute, description, score_diff, scoring_play, win_prob) %>%
mutate(time_left_mins = round(secs_remaining_absolute / 60, 2)) %>%
select(-secs_remaining_absolute)
write.csv(creighton_cleaned, "../data/creighton_cleaned.csv", row.names = FALSE)
head(creighton_cleaned, 10)
reticulate::repl_python()
import pandas as pd
creighton <- pd.read_csv("../data/creighton_2022_23.csv")
quit
creighton <- read.csv("../data/creighton_2022_23.csv")
head(creighton)
library(dplyr)
creighton_cleaned <- creighton %>%
select(home, away, secs_remaining_absolute, description, score_diff, scoring_play, win_prob) %>%
mutate(time_left_mins = round(secs_remaining_absolute / 60, 2)) %>%
select(-secs_remaining_absolute)
write.csv(creighton_cleaned, "../data/creighton_cleaned.csv", row.names = FALSE)
head(creighton_cleaned, 10)
reticulate::repl_python()
import pandas as pd
creighton <- pd.read_csv("../data/creighton_2022_23.csv")
import pandas as pd
creighton = pd.read_csv("../data/creighton_2022_23.csv")
creighton_roster = ["Jasen Green", "Ben Shtolzberg", "Ryan Nembhard", "Shereef Mitchell", "Francisco Farabello", "Zander Yates", "Ryan Kalkbrenner", "Mason Miller", "Sami Osmani", "John Christofilis", "Evan Young", "Devin Davis", "Trey Alexander", "Arthur Kaluma", "Fredrick King", "Baylor Scheierman"]
search_pattern= '|'.join(creighton_roster)
creighton_action = creighton[creighton["description"].str.contains(creighton_roster)]
creighton_roster = ["Jasen Green", "Ben Shtolzberg", "Ryan Nembhard", "Shereef Mitchell", "Francisco Farabello", "Zander Yates", "Ryan Kalkbrenner", "Mason Miller", "Sami Osmani", "John Christofilis", "Evan Young", "Devin Davis", "Trey Alexander", "Arthur Kaluma", "Fredrick King", "Baylor Scheierman"]
search_pattern= '|'.join(creighton_roster)
creighton_action = creighton[creighton['description'].apply(lambda x: any(search_str in x for roster in creighton_roster))]
creighton_roster = ["Jasen Green", "Ben Shtolzberg", "Ryan Nembhard", "Shereef Mitchell", "Francisco Farabello", "Zander Yates", "Ryan Kalkbrenner", "Mason Miller", "Sami Osmani", "John Christofilis", "Evan Young", "Devin Davis", "Trey Alexander", "Arthur Kaluma", "Fredrick King", "Baylor Scheierman"]
search_pattern= '|'.join(creighton_roster)
creighton_action = creighton[creighton['description'].apply(lambda x: any(roster in x for roster in creighton_roster))]
creighton_roster = ["Jasen Green", "Ben Shtolzberg", "Ryan Nembhard", "Shereef Mitchell", "Francisco Farabello", "Zander Yates", "Ryan Kalkbrenner", "Mason Miller", "Sami Osmani", "John Christofilis", "Evan Young", "Devin Davis", "Trey Alexander", "Arthur Kaluma", "Fredrick King", "Baylor Scheierman"]
search_pattern= '|'.join(creighton_roster)
creighton_action = creighton[creighton['description'].apply(lambda x: any(roster in x for roster in creighton_roster))]
creighton_action
creighton_roster = ["Jasen Green", "Ben Shtolzberg", "Ryan Nembhard", "Shereef Mitchell", "Francisco Farabello", "Zander Yates", "Ryan Kalkbrenner", "Mason Miller", "Sami Osmani", "John Christofilis", "Evan Young", "Devin Davis", "Trey Alexander", "Arthur Kaluma", "Fredrick King", "Baylor Scheierman"]
search_pattern= '|'.join(creighton_roster)
creighton_action = creighton[creighton['description'].apply(lambda x: any(roster in x for roster in creighton_roster))]
creighton_action.head(10)
creighton_roster = ["Jasen Green", "Ben Shtolzberg", "Ryan Nembhard", "Shereef Mitchell", "Francisco Farabello", "Zander Yates", "Ryan Kalkbrenner", "Mason Miller", "Sami Osmani", "John Christofilis", "Evan Young", "Devin Davis", "Trey Alexander", "Arthur Kaluma", "Fredrick King", "Baylor Scheierman"]
search_pattern= '|'.join(creighton_roster)
creighton_action = creighton[creighton['description'].apply(lambda x: any(roster in x for roster in creighton_roster))]
creighton_actioniloc[:,:5].head(10)
creighton_roster = ["Jasen Green", "Ben Shtolzberg", "Ryan Nembhard", "Shereef Mitchell", "Francisco Farabello", "Zander Yates", "Ryan Kalkbrenner", "Mason Miller", "Sami Osmani", "John Christofilis", "Evan Young", "Devin Davis", "Trey Alexander", "Arthur Kaluma", "Fredrick King", "Baylor Scheierman"]
search_pattern= '|'.join(creighton_roster)
creighton_action = creighton[creighton['description'].apply(lambda x: any(roster in x for roster in creighton_roster))]
creighton_action.iloc[:,:5].head(10))
creighton_roster = ["Jasen Green", "Ben Shtolzberg", "Ryan Nembhard", "Shereef Mitchell", "Francisco Farabello", "Zander Yates", "Ryan Kalkbrenner", "Mason Miller", "Sami Osmani", "John Christofilis", "Evan Young", "Devin Davis", "Trey Alexander", "Arthur Kaluma", "Fredrick King", "Baylor Scheierman"]
search_pattern= '|'.join(creighton_roster)
creighton_action = creighton[creighton['description'].apply(lambda x: any(roster in x for roster in creighton_roster))]
creighton_action.iloc[:,:5].head(10)
creighton_roster = ["Jasen Green", "Ben Shtolzberg", "Ryan Nembhard", "Shereef Mitchell", "Francisco Farabello", "Zander Yates", "Ryan Kalkbrenner", "Mason Miller", "Sami Osmani", "John Christofilis", "Evan Young", "Devin Davis", "Trey Alexander", "Arthur Kaluma", "Fredrick King", "Baylor Scheierman"]
search_pattern= '|'.join(creighton_roster)
creighton_action = creighton[creighton['description'].apply(lambda x: any(roster in x for roster in creighton_roster))]
creighton_action = creighton_action.loc[:, "description", "scoring_play"]
creighton_action.iloc[:,:5].head(10)
creighton_roster = ["Jasen Green", "Ben Shtolzberg", "Ryan Nembhard", "Shereef Mitchell", "Francisco Farabello", "Zander Yates", "Ryan Kalkbrenner", "Mason Miller", "Sami Osmani", "John Christofilis", "Evan Young", "Devin Davis", "Trey Alexander", "Arthur Kaluma", "Fredrick King", "Baylor Scheierman"]
search_pattern= '|'.join(creighton_roster)
creighton_action = creighton[creighton['description'].apply(lambda x: any(roster in x for roster in creighton_roster))]
columns_to_select= ["description" "scoring_play"]
creighton_action = creighton_action.loc[:, columns_to_select]
creighton_action.iloc[:,:5].head(10)
creighton_roster = ["Jasen Green", "Ben Shtolzberg", "Ryan Nembhard", "Shereef Mitchell", "Francisco Farabello", "Zander Yates", "Ryan Kalkbrenner", "Mason Miller", "Sami Osmani", "John Christofilis", "Evan Young", "Devin Davis", "Trey Alexander", "Arthur Kaluma", "Fredrick King", "Baylor Scheierman"]
search_pattern= '|'.join(creighton_roster)
creighton_action = creighton[creighton['description'].apply(lambda x: any(roster in x for roster in creighton_roster))]
columns_to_select= ["description", "scoring_play"]
creighton_action = creighton_action.loc[:, columns_to_select]
creighton_action.iloc[:,:5].head(10)
creighton_roster = ["Jasen Green", "Ben Shtolzberg", "Ryan Nembhard", "Shereef Mitchell", "Francisco Farabello", "Zander Yates", "Ryan Kalkbrenner", "Mason Miller", "Sami Osmani", "John Christofilis", "Evan Young", "Devin Davis", "Trey Alexander", "Arthur Kaluma", "Fredrick King", "Baylor Scheierman"]
search_pattern= '|'.join(creighton_roster)
creighton_action = creighton[creighton['description'].apply(lambda x: any(roster in x for roster in creighton_roster))]
columns_to_select= ["description", "scoring_play"]
creighton_action = creighton_action.loc[:, columns_to_select]
creighton_action.head(10)
print("Number of rows with Creighton player descriptions:, " creighton_action.shape[0]
print("Number of rows with Creighton player descriptions:, " creighton_action.shape[0])
print("Number of rows with Creighton player descriptions:," creighton_action.shape[0])
print("Number of rows with Creighton player descriptions:", creighton_action.shape[0])
creighton_cleaned = pd.read_csv("../data/creighton_cleaned.csv")
creighton_cleaned = pd.read_csv("../data/creighton_cleaned.csv")
creighton_cleaned = pd.read_csv("../data/creighton_cleaned.csv")
creighton_roster = ["Jasen Green", "Ben Shtolzberg", "Ryan Nembhard", "Shereef Mitchell", "Francisco Farabello", "Zander Yates", "Ryan Kalkbrenner", "Mason Miller", "Sami Osmani", "John Christofilis", "Evan Young", "Devin Davis", "Trey Alexander", "Arthur Kaluma", "Fredrick King", "Baylor Scheierman"]
creighton_cleaned["creighton_data"] = df["description"].str.contains(search_pattern)
creighton_cleaned.head(10)
creighton_cleaned = pd.read_csv("../data/creighton_cleaned.csv")
creighton_roster = ["Jasen Green", "Ben Shtolzberg", "Ryan Nembhard", "Shereef Mitchell", "Francisco Farabello", "Zander Yates", "Ryan Kalkbrenner", "Mason Miller", "Sami Osmani", "John Christofilis", "Evan Young", "Devin Davis", "Trey Alexander", "Arthur Kaluma", "Fredrick King", "Baylor Scheierman"]
creighton_cleaned["creighton_data"] = creighton_cleaned["description"].str.contains(search_pattern)
creighton_cleaned.head(10)
creighton_cleaned = pd.read_csv("../data/creighton_cleaned.csv")
creighton_roster = ["Jasen Green", "Ben Shtolzberg", "Ryan Nembhard", "Shereef Mitchell", "Francisco Farabello", "Zander Yates", "Ryan Kalkbrenner", "Mason Miller", "Sami Osmani", "John Christofilis", "Evan Young", "Devin Davis", "Trey Alexander", "Arthur Kaluma", "Fredrick King", "Baylor Scheierman"]
creighton_cleaned["creighton_data"] = creighton_cleaned["description"].str.contains(search_pattern)
creighton_cleaned.loc[:, 1:10].head(10)
creighton_cleaned = pd.read_csv("../data/creighton_cleaned.csv")
creighton_roster = ["Jasen Green", "Ben Shtolzberg", "Ryan Nembhard", "Shereef Mitchell", "Francisco Farabello", "Zander Yates", "Ryan Kalkbrenner", "Mason Miller", "Sami Osmani", "John Christofilis", "Evan Young", "Devin Davis", "Trey Alexander", "Arthur Kaluma", "Fredrick King", "Baylor Scheierman"]
creighton_cleaned["creighton_data"] = creighton_cleaned["description"].str.contains(search_pattern)
creighton_cleaned.iloc[:, 1:10].head(10)
creighton_cleaned['players_involved'] = creighton_cleaned['description'].apply(lambda x: [name for name in creighton_roster if name in x])
creighton_cleaned.iloc[:, 1:10].head(10)
creighton_cleaned['players_involved'] = creighton_cleaned['description'].apply(lambda x: [name for name in creighton_roster if name in x] if any(name in x for name in creighton_roster) else 'N/A')
creighton_cleaned.iloc[:, 1:10].head(10)
creighton_cleaned['players_involved'] = creighton_cleaned['description'].apply(lambda x: [name for name in creighton_roster if name in x] if any(name in x for name in creighton_roster) else None)
creighton_cleaned.iloc[:, 1:10].head(10)
expanded_df = creighton_cleaned.explode("players_involved")
player_counts = expanded_df["players_involved"].value_counts()
expanded_df = creighton_cleaned.explode("players_involved")
player_counts = expanded_df["players_involved"].value_counts()
expanded_df = creighton_cleaned.explode("players_involved")
player_counts = expanded_df["players_involved"].value_counts()
expanded_df = creighton_cleaned.explode("players_involved")
player_counts = expanded_df["players_involved"].value_counts()
print(player_counts)
expanded_df = creighton_cleaned.explode("players_involved")
player_counts = expanded_df["players_involved"].value_counts()
print(player_counts)
creighton_cleaned.to_csv("../data/creighton_cleaned.csv", index= False)
creighton_cleaned.to_csv("../data/creighton_cleaned.csv", index= False)
quit
install.packages('rmarkdown')
creighton <- read.csv("../data/creighton_2022_23.csv")
head(creighton[, 1:5])
library(dplyr)
creighton_cleaned <- creighton %>%
select(home, away, secs_remaining_absolute, description, score_diff, scoring_play, win_prob) %>%
mutate(time_left_mins = round(secs_remaining_absolute / 60, 2)) %>%
select(-secs_remaining_absolute)
write.csv(creighton_cleaned, "../data/creighton_cleaned.csv", row.names = FALSE)
head(creighton_cleaned, 10)
reticulate::repl_python()
import pandas as pd
creighton = pd.read_csv("../data/creighton_2022_23.csv")
creighton_roster = ["Jasen Green", "Ben Shtolzberg", "Ryan Nembhard", "Shereef Mitchell", "Francisco Farabello", "Zander Yates", "Ryan Kalkbrenner", "Mason Miller", "Sami Osmani", "John Christofilis", "Evan Young", "Devin Davis", "Trey Alexander", "Arthur Kaluma", "Fredrick King", "Baylor Scheierman"]
search_pattern= '|'.join(creighton_roster)
creighton_action = creighton[creighton['description'].apply(lambda x: any(roster in x for roster in creighton_roster))]
columns_to_select= ["description", "scoring_play"]
creighton_action = creighton_action.loc[:, columns_to_select]
creighton_action.head(10)
print("Number of rows with Creighton player descriptions:", creighton_action.shape[0])
creighton_cleaned = pd.read_csv("../data/creighton_cleaned.csv")
creighton_roster = ["Jasen Green", "Ben Shtolzberg", "Ryan Nembhard", "Shereef Mitchell", "Francisco Farabello", "Zander Yates", "Ryan Kalkbrenner", "Mason Miller", "Sami Osmani", "John Christofilis", "Evan Young", "Devin Davis", "Trey Alexander", "Arthur Kaluma", "Fredrick King", "Baylor Scheierman"]
creighton_cleaned["creighton_data"] = creighton_cleaned["description"].str.contains(search_pattern)
creighton_cleaned.iloc[:, 1:10].head(10)
creighton_cleaned['players_involved'] = creighton_cleaned['description'].apply(lambda x: [name for name in creighton_roster if name in x] if any(name in x for name in creighton_roster) else None)
creighton_cleaned.iloc[:, 1:10].head(10)
expanded_df = creighton_cleaned.explode("players_involved")
player_counts = expanded_df["players_involved"].value_counts()
print(player_counts)
creighton_cleaned.to_csv("../data/creighton_cleaned.csv", index= False)
descriptions = creighton_cleaned["description"]
vectorizer = CountVectorizer()
v = vectorizer.fit_transform(descriptions)
from sklearn.feature_extraction.text import CountVectorizer
descriptions = creighton_cleaned["description"]
vectorizer = CountVectorizer()
v = vectorizer.fit_transform(descriptions)
from sklearn.feature_extraction.text import CountVectorizer
import matplotlib.pyplot as plt
from wordcloud import WordCloud
from sklearn.feature_extraction.text import ENGLISH_STOP_WORDS as stopwords
descriptions = creighton_cleaned["description"]
vectorizer = CountVectorizer()
v = vectorizer.fit_transform(descriptions)
words = vectorizer.get_feature_names_out()
word_frequencies = dict(zip(words, X.sum(axis=0).tolist()[0]))
word_frequencies = {word: freq for word, freq in word_frequencies.items() if word not in stopwords}
wordcloud = WordCloud(width=800, height=400, background_color='white').generate_from_frequencies(word_frequencies)
plt.figure(figsize=(10, 5))
plt.imshow(wordcloud, interpolation='bilinear')
plt.axis('off')
plt.show()
descriptions = creighton_cleaned["description"]
vectorizer = CountVectorizer()
v = vectorizer.fit_transform(descriptions)
words = vectorizer.get_feature_names_out()
word_frequencies = dict(zip(words, X.sum(axis=0).tolist()[0]))
word_frequencies = {word: freq for word, freq in word_frequencies.items() if word not in stopwords}
wordcloud = WordCloud(width=800, height=400, background_color='white').generate_from_frequencies(word_frequencies)
plt.figure(figsize=(10, 5))
plt.imshow(wordcloud, interpolation='bilinear')
plt.axis('off')
plt.show()
from sklearn.feature_extraction.text import CountVectorizer
import matplotlib.pyplot as plt
from wordcloud import WordCloud
from sklearn.feature_extraction.text import ENGLISH_STOP_WORDS as stopwords
descriptions = creighton_cleaned["description"]
vectorizer = CountVectorizer()
v = vectorizer.fit_transform(descriptions)
words = vectorizer.get_feature_names_out()
word_frequencies = dict(zip(words, X.sum(axis=0).tolist()[0]))
word_frequencies = {word: freq for word, freq in word_frequencies.items() if word not in stopwords}
wordcloud = WordCloud(width=800, height=400, background_color='white').generate_from_frequencies(word_frequencies)
plt.figure(figsize=(10, 5))
plt.imshow(wordcloud, interpolation='bilinear')
plt.axis('off')
plt.show()
descriptions = creighton_cleaned["description"]
vectorizer = CountVectorizer()
v = vectorizer.fit_transform(descriptions)
words = vectorizer.get_feature_names_out()
word_frequencies = dict(zip(words, v.sum(axis=0).tolist()[0]))
word_frequencies = {word: freq for word, freq in word_frequencies.items() if word not in stopwords}
wordcloud = WordCloud(width=800, height=400, background_color='white').generate_from_frequencies(word_frequencies)
plt.figure(figsize=(10, 5))
plt.imshow(wordcloud, interpolation='bilinear')
plt.axis('off')
plt.show()
descriptions = creighton_cleaned["description"]
vectorizer = CountVectorizer()
v = vectorizer.fit_transform(descriptions)
words = vectorizer.get_feature_names_out()
word_frequencies = dict(zip(words, v.sum(axis=0).tolist()[0]))
word_frequencies = {word: freq for word, freq in word_frequencies.items() if word not in stopwords}
wordcloud = WordCloud(width=800, height=400, background_color='white').generate_from_frequencies(word_frequencies)
plt.figure(figsize=(10, 5))
plt.imshow(wordcloud, interpolation='bilinear')
plt.axis('off')
plt.show()
