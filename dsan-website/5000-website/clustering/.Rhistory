plt.figure()
fig = px.scatter_3d(pca_df, x='PCA1', y='PCA2', z='PCA3', color=labels, symbol=labels, opacity=0.7, size_max=10, title='3D Scatter Plot of PC1, PC2, and PC3 with Cluster Labels', labels={'0': 'Principal Component 1 (PC1)',
'1': 'Principal Component 2 (PC2)', '2': 'Principal Component 3 (PC3)', 'color': 'Cluster'},)
fig.update_layout(scene=dict(annotations=[dict(x=0, y=0, z=0, text='Cluster', showarrow=False, font=dict(size=50))]))
fig.show()
import numpy as np
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
import sklearn
bart = pd.read_csv('../data/bart_dimensionality.csv')
drop_columns = ['YearRank', 'G']
bart.drop(columns= drop_columns, inplace= True)
bart.columns
from sklearn.cluster import KMeans, MeanShift, AgglomerativeClustering, Birch, DBSCAN
from sklearn.metrics import silhouette_score
import warnings
warnings.filterwarnings('ignore')
scaler= StandardScaler()
bart_standardized = scaler.fit_transform(bart)
clusters = list(range(2,11))
inertia = []
distortion_val = []
silhouette_scores = []
for c in clusters:
kmeans = KMeans(n_clusters= c)
kmeans.fit(bart_standardized)
distortion = sum(np.min(kmeans.transform(bart_standardized), axis= 1)) / bart_standardized.shape[0]
distortion_val.append(distortion)
inertia.append(kmeans.inertia_)
silhouette_scores.append(silhouette_score(bart_standardized, kmeans.labels_))
results_df = pd.DataFrame({"Cluster": clusters, "Distortion": distortion_val, "Inertia": inertia, 'Silhouette Score': silhouette_scores})
results_df
import matplotlib.pyplot as plt
# Plotting Distortion
plt.figure(figsize=(8, 5))
plt.plot(results_df['Cluster'], results_df['Distortion'], marker='o')
plt.title('Distortion')
plt.xlabel('Number of Clusters')
plt.ylabel('Distortion')
plt.show()
#Plotting Inertia
plt.figure(figsize=(8, 5))
plt.plot(results_df['Cluster'], results_df['Inertia'], marker='o', color='orange')
plt.title('Inertia')
plt.xlabel('Number of Clusters')
plt.ylabel('Inertia')
plt.show()
plt.figure(figsize=(8, 5))
plt.plot(results_df['Cluster'], results_df['Silhouette Score'], marker='o', color='green')
plt.title('Silhouette Score')
plt.xlabel('Number of Clusters')
plt.ylabel('Silhouette Score')
plt.show()
pca_components = pd.read_csv("../data/pca_components.csv")
pca = PCA(n_components=3)
bart_pca = pca.fit_transform(bart_standardized)
components = pca.components_
kmean = KMeans(n_clusters=2, random_state=101)
kmean.fit(bart_standardized)
labels = kmean.labels_
pca_df = pd.DataFrame(data=bart_pca, columns=['PCA1', 'PCA2', 'PCA3'])
pca_df['Cluster'] = labels
plt.figure(figsize=(10, 6))
sns.scatterplot(x='PCA1', y='PCA2', hue='Cluster', data=pca_df, palette='viridis', edgecolor='w', s=80)
plt.title('K-Means Clusters in PCA Space (First Two Components)')
plt.xlabel('PCA Component 1')
plt.ylabel('PCA Component 2')
plt.show()
plt.figure()
fig = px.scatter_3d(pca_df, x='PCA1', y='PCA2', z='PCA3', color=labels, symbol=labels, opacity=0.7, size_max=10, title='3D Scatter Plot of PC1, PC2, and PC3 with Cluster Labels', labels={'0': 'Principal Component 1 (PC1)',
'1': 'Principal Component 2 (PC2)', '2': 'Principal Component 3 (PC3)', 'color': 'Cluster'},)
fig.update_layout(scene=dict(annotations=[dict(x=0, y=0, z=0, text='Cluster', showarrow=False, font=dict(size=50))]))
fig.show()
import numpy as np
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
import sklearn
bart = pd.read_csv('../data/bart_dimensionality.csv')
drop_columns = ['G']
bart.drop(columns= drop_columns, inplace= True)
bart.columns
import numpy as np
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
import sklearn
bart = pd.read_csv('../data/bart_dimensionality.csv')
from sklearn.cluster import KMeans, MeanShift, AgglomerativeClustering, Birch, DBSCAN
from sklearn.metrics import silhouette_score
import warnings
warnings.filterwarnings('ignore')
scaler= StandardScaler()
bart_standardized = scaler.fit_transform(bart)
clusters = list(range(2,11))
inertia = []
distortion_val = []
silhouette_scores = []
for c in clusters:
kmeans = KMeans(n_clusters= c)
kmeans.fit(bart_standardized)
distortion = sum(np.min(kmeans.transform(bart_standardized), axis= 1)) / bart_standardized.shape[0]
distortion_val.append(distortion)
inertia.append(kmeans.inertia_)
silhouette_scores.append(silhouette_score(bart_standardized, kmeans.labels_))
results_df = pd.DataFrame({"Cluster": clusters, "Distortion": distortion_val, "Inertia": inertia, 'Silhouette Score': silhouette_scores})
results_df
import matplotlib.pyplot as plt
# Plotting Distortion
plt.figure(figsize=(8, 5))
plt.plot(results_df['Cluster'], results_df['Distortion'], marker='o')
plt.title('Distortion')
plt.xlabel('Number of Clusters')
plt.ylabel('Distortion')
plt.show()
#Plotting Inertia
plt.figure(figsize=(8, 5))
plt.plot(results_df['Cluster'], results_df['Inertia'], marker='o', color='orange')
plt.title('Inertia')
plt.xlabel('Number of Clusters')
plt.ylabel('Inertia')
plt.show()
plt.figure(figsize=(8, 5))
plt.plot(results_df['Cluster'], results_df['Silhouette Score'], marker='o', color='green')
plt.title('Silhouette Score')
plt.xlabel('Number of Clusters')
plt.ylabel('Silhouette Score')
plt.show()
pca_components = pd.read_csv("../data/pca_components.csv")
pca = PCA(n_components=3)
bart_pca = pca.fit_transform(bart_standardized)
components = pca.components_
kmean = KMeans(n_clusters=2, random_state=101)
kmean.fit(bart_standardized)
labels = kmean.labels_
pca_df = pd.DataFrame(data=bart_pca, columns=['PCA1', 'PCA2', 'PCA3'])
pca_df['Cluster'] = labels
plt.figure(figsize=(10, 6))
sns.scatterplot(x='PCA1', y='PCA2', hue='Cluster', data=pca_df, palette='viridis', edgecolor='w', s=80)
plt.title('K-Means Clusters in PCA Space (First Two Components)')
plt.xlabel('PCA Component 1')
plt.ylabel('PCA Component 2')
plt.show()
plt.figure()
fig = px.scatter_3d(pca_df, x='PCA1', y='PCA2', z='PCA3', color=labels, symbol=labels, opacity=0.7, size_max=10, title='3D Scatter Plot of PC1, PC2, and PC3 with Cluster Labels', labels={'0': 'Principal Component 1 (PC1)',
'1': 'Principal Component 2 (PC2)', '2': 'Principal Component 3 (PC3)', 'color': 'Cluster'},)
fig.update_layout(scene=dict(annotations=[dict(x=0, y=0, z=0, text='Cluster', showarrow=False, font=dict(size=50))]))
fig.show()
import numpy as np
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
import sklearn
bart = pd.read_csv('../data/bart_dimensionality.csv')
remove_target = ['Made_Tournament']
bart.drop(columns= 'Made_Tournament', inplace=True)
from sklearn.cluster import KMeans, MeanShift, AgglomerativeClustering, Birch, DBSCAN
from sklearn.metrics import silhouette_score
import warnings
warnings.filterwarnings('ignore')
scaler= StandardScaler()
bart_standardized = scaler.fit_transform(bart)
clusters = list(range(2,11))
inertia = []
distortion_val = []
silhouette_scores = []
for c in clusters:
kmeans = KMeans(n_clusters= c)
kmeans.fit(bart_standardized)
distortion = sum(np.min(kmeans.transform(bart_standardized), axis= 1)) / bart_standardized.shape[0]
distortion_val.append(distortion)
inertia.append(kmeans.inertia_)
silhouette_scores.append(silhouette_score(bart_standardized, kmeans.labels_))
results_df = pd.DataFrame({"Cluster": clusters, "Distortion": distortion_val, "Inertia": inertia, 'Silhouette Score': silhouette_scores})
results_df
import numpy as np
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
import sklearn
bart = pd.read_csv('../data/bart_dimensionality.csv')
remove_target = ['Made_Tournament']
bart.drop(columns= 'Made_Tournament', inplace=True)
from sklearn.cluster import KMeans, MeanShift, AgglomerativeClustering, Birch, DBSCAN
from sklearn.metrics import silhouette_score
import warnings
warnings.filterwarnings('ignore')
scaler= StandardScaler()
bart_standardized = scaler.fit_transform(bart)
clusters = list(range(2,11))
inertia = []
distortion_val = []
silhouette_scores = []
for c in clusters:
kmeans = KMeans(n_clusters= c)
kmeans.fit(bart_standardized)
distortion = sum(np.min(kmeans.transform(bart_standardized), axis= 1)) / bart_standardized.shape[0]
distortion_val.append(distortion)
inertia.append(kmeans.inertia_)
silhouette_scores.append(silhouette_score(bart_standardized, kmeans.labels_))
results_df = pd.DataFrame({"Cluster": clusters, "Distortion": distortion_val, "Inertia": inertia, 'Silhouette Score': silhouette_scores})
results_df
import matplotlib.pyplot as plt
# Plotting Distortion
plt.figure(figsize=(8, 5))
plt.plot(results_df['Cluster'], results_df['Distortion'], marker='o')
plt.title('Distortion')
plt.xlabel('Number of Clusters')
plt.ylabel('Distortion')
plt.show()
#Plotting Inertia
plt.figure(figsize=(8, 5))
plt.plot(results_df['Cluster'], results_df['Inertia'], marker='o', color='orange')
plt.title('Inertia')
plt.xlabel('Number of Clusters')
plt.ylabel('Inertia')
plt.show()
plt.figure(figsize=(8, 5))
plt.plot(results_df['Cluster'], results_df['Silhouette Score'], marker='o', color='green')
plt.title('Silhouette Score')
plt.xlabel('Number of Clusters')
plt.ylabel('Silhouette Score')
plt.show()
pca_components = pd.read_csv("../data/pca_components.csv")
pca = PCA(n_components=3)
bart_pca = pca.fit_transform(bart_standardized)
components = pca.components_
kmean = KMeans(n_clusters=2, random_state=101)
kmean.fit(bart_standardized)
labels = kmean.labels_
pca_df = pd.DataFrame(data=bart_pca, columns=['PCA1', 'PCA2', 'PCA3'])
pca_df['Cluster'] = labels
plt.figure(figsize=(10, 6))
sns.scatterplot(x='PCA1', y='PCA2', hue='Cluster', data=pca_df, palette='viridis', edgecolor='w', s=80)
plt.title('K-Means Clusters in PCA Space (First Two Components)')
plt.xlabel('PCA Component 1')
plt.ylabel('PCA Component 2')
plt.show()
plt.figure()
fig = px.scatter_3d(pca_df, x='PCA1', y='PCA2', z='PCA3', color=labels, symbol=labels, opacity=0.7, size_max=10, title='3D Scatter Plot of PC1, PC2, and PC3 with Cluster Labels', labels={'0': 'Principal Component 1 (PC1)',
'1': 'Principal Component 2 (PC2)', '2': 'Principal Component 3 (PC3)', 'color': 'Cluster'},)
fig.update_layout(scene=dict(annotations=[dict(x=0, y=0, z=0, text='Cluster', showarrow=False, font=dict(size=50))]))
fig.show()
plt.figure()
fig = px.scatter_3d(pca_df, x='PCA1', y='PCA2', z='PCA3', color=labels, symbol=labels, opacity=0.7, size_max=10, title='3D Scatter Plot of PC1, PC2, and PC3 with Cluster Labels', labels={'0': 'Principal Component 1 (PC1)',
'1': 'Principal Component 2 (PC2)', '2': 'Principal Component 3 (PC3)', 'color': 'Cluster'},color_discrete_map={0: 'blue', 1: 'green'})
fig.update_layout(scene=dict(annotations=[dict(x=0, y=0, z=0, text='Cluster', showarrow=False, font=dict(size=50))]))
fig.show()
fig = px.scatter_3d(pca_df, x='PCA1', y='PCA2', z='PCA3', color=labels, symbol=labels, opacity=0.7, size_max=10, title='3D Scatter Plot of PC1, PC2, and PC3 with Cluster Labels', labels={'0': 'Principal Component 1 (PC1)', '1': 'Principal Component 2 (PC2)','2': 'Principal Component 3 (PC3)', 'color': 'Cluster'}, color_discrete_map={0: 'blue', 1: 'green'})
fig.update_layout(scene=dict(annotations=[dict(x=0, y=0, z=0, text='Cluster', showarrow=False)]))
fig.update_layout(scene=dict(xaxis=dict(title_font=dict(size=16)),
yaxis=dict(title_font=dict(size=16)),
zaxis=dict(title_font=dict(size=16))))
fig.show()
fig = px.scatter_3d(pca_df, x='PCA1', y='PCA2', z='PCA3', color='Cluster', symbol='Cluster', opacity=0.7, size_max=10, title='3D Scatter Plot of PC1, PC2, and PC3 with Cluster Labels', labels={'0': 'Principal Component 1 (PC1)', '1': 'Principal Component 2 (PC2)','2': 'Principal Component 3 (PC3)', 'color': 'Cluster'}, color_discrete_map={0: 'blue', 1: 'green'})
fig.update_layout(scene=dict(annotations=[dict(x=0, y=0, z=0, text='Cluster', showarrow=False)]))
fig.update_layout(scene=dict(xaxis=dict(title_font=dict(size=16)),
yaxis=dict(title_font=dict(size=16)),
zaxis=dict(title_font=dict(size=16))))
fig.show()
fig = px.scatter_3d(pca_df, x='PCA1', y='PCA2', z='PCA3', color='Cluster', symbol='Cluster', opacity=0.7, size_max=10, title='3D Scatter Plot of PC1, PC2, and PC3 with Cluster Labels', labels={'0': 'Principal Component 1 (PC1)', '1': 'Principal Component 2 (PC2)','2': 'Principal Component 3 (PC3)', 'color': 'Cluster'}, color_discrete_sequence=['blue', 'green'])
fig.update_layout(scene=dict(annotations=[dict(x=0, y=0, z=0, text='Cluster', showarrow=False)]))
fig.update_layout(scene=dict(xaxis=dict(title_font=dict(size=16)),
yaxis=dict(title_font=dict(size=16)),
zaxis=dict(title_font=dict(size=16))))
fig.show()
pca_df['Cluster'] = pca_df['Cluster'].astype(str)
fig = px.scatter_3d(pca_df, x='PCA1', y='PCA2', z='PCA3', color='Cluster', symbol='Cluster', opacity=0.7, size_max=10, title='3D Scatter Plot of PC1, PC2, and PC3 with Cluster Labels', labels={'0': 'Principal Component 1 (PC1)', '1': 'Principal Component 2 (PC2)','2': 'Principal Component 3 (PC3)', 'color': 'Cluster'}, color_discrete_sequence=['blue', 'green'])
fig.update_layout(scene=dict(annotations=[dict(x=0, y=0, z=0, text='Cluster', showarrow=False)]))
fig.update_layout(scene=dict(xaxis=dict(title_font=dict(size=16)),
yaxis=dict(title_font=dict(size=16)),
zaxis=dict(title_font=dict(size=16))))
fig.show()
eps = []
for p in range(2, 21):
eps.append(0.25*(p-1))
min_samples = list(range(1,21))
clust = []
silhouette = []
for e in eps:
for m in min_samples:
dbscan = DBSCAN(eps=e, min_samples=m)
dbscan_labels = dbscan.fit_predict(bart_standardized)
estim = len(set(dbscan_labels))
if estim > 1:
sil = sklearn.metrics.silhouette_score(bart_standardized, dbscan_labels)
clust.append(estim)
silhouette.append(sil)
silhouette_df = pd.DataFrame({"Clusters": clust, "Silhouette Score": silhouette})
plt.figure()
sns.lineplot(data= silhouette_df, x="Clusters", y="Silhouette Score")
eps = []
for p in range(2, 21):
eps.append(0.25*(p-1))
min_samples = list(range(1,21))
clust = []
silhouette = []
for e in eps:
for m in min_samples:
dbscan = DBSCAN(eps=e, min_samples=m)
dbscan_labels = dbscan.fit_predict(bart_standardized)
estim = len(set(dbscan_labels))
if estim > 1:
sil = sklearn.metrics.silhouette_score(bart_standardized, dbscan_labels)
clust.append(estim)
silhouette.append(sil)
silhouette_df = pd.DataFrame({"Clusters": clust, "Silhouette Score": silhouette})
plt.figure()
sns.lineplot(data= silhouette_df, x="Clusters", y="Silhouette Score")
import numpy as np
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
import sklearn
bart = pd.read_csv('../data/bart_dimensionality.csv')
remove_target = ['Made_Tournament']
bart.drop(columns= 'Made_Tournament', inplace=True)
from sklearn.cluster import KMeans, MeanShift, AgglomerativeClustering, Birch, DBSCAN
from sklearn.metrics import silhouette_score
import warnings
warnings.filterwarnings('ignore')
scaler= StandardScaler()
bart_standardized = scaler.fit_transform(bart)
clusters = list(range(2,11))
inertia = []
distortion_val = []
silhouette_scores = []
for c in clusters:
kmeans = KMeans(n_clusters= c)
kmeans.fit(bart_standardized)
distortion = sum(np.min(kmeans.transform(bart_standardized), axis= 1)) / bart_standardized.shape[0]
distortion_val.append(distortion)
inertia.append(kmeans.inertia_)
silhouette_scores.append(silhouette_score(bart_standardized, kmeans.labels_))
results_df = pd.DataFrame({"Cluster": clusters, "Distortion": distortion_val, "Inertia": inertia, 'Silhouette Score': silhouette_scores})
results_df
import matplotlib.pyplot as plt
# Plotting Distortion
plt.figure(figsize=(8, 5))
plt.plot(results_df['Cluster'], results_df['Distortion'], marker='o')
plt.title('Distortion')
plt.xlabel('Number of Clusters')
plt.ylabel('Distortion')
plt.show()
#Plotting Inertia
plt.figure(figsize=(8, 5))
plt.plot(results_df['Cluster'], results_df['Inertia'], marker='o', color='orange')
plt.title('Inertia')
plt.xlabel('Number of Clusters')
plt.ylabel('Inertia')
plt.show()
plt.figure(figsize=(8, 5))
plt.plot(results_df['Cluster'], results_df['Silhouette Score'], marker='o', color='green')
plt.title('Silhouette Score')
plt.xlabel('Number of Clusters')
plt.ylabel('Silhouette Score')
plt.show()
pca_components = pd.read_csv("../data/pca_components.csv")
pca = PCA(n_components=3)
bart_pca = pca.fit_transform(bart_standardized)
components = pca.components_
kmean = KMeans(n_clusters=2, random_state=101)
kmean.fit(bart_standardized)
labels = kmean.labels_
pca_df = pd.DataFrame(data=bart_pca, columns=['PCA1', 'PCA2', 'PCA3'])
pca_df['Cluster'] = labels
plt.figure(figsize=(10, 6))
sns.scatterplot(x='PCA1', y='PCA2', hue='Cluster', data=pca_df, palette='viridis', edgecolor='w', s=80)
plt.title('K-Means Clusters in PCA Space (First Two Components)')
plt.xlabel('PCA Component 1')
plt.ylabel('PCA Component 2')
plt.show()
pca_df['Cluster'] = pca_df['Cluster'].astype(str)
fig = px.scatter_3d(pca_df, x='PCA1', y='PCA2', z='PCA3', color='Cluster', symbol='Cluster', opacity=0.7, size_max=10, title='3D Scatter Plot of PC1, PC2, and PC3 with Cluster Labels', labels={'0': 'Principal Component 1 (PC1)', '1': 'Principal Component 2 (PC2)','2': 'Principal Component 3 (PC3)', 'color': 'Cluster'}, color_discrete_sequence=['blue', 'green'])
fig.update_layout(scene=dict(annotations=[dict(x=0, y=0, z=0, text='Cluster', showarrow=False)]))
fig.update_layout(scene=dict(xaxis=dict(title_font=dict(size=16)),
yaxis=dict(title_font=dict(size=16)),
zaxis=dict(title_font=dict(size=16))))
fig.show()
eps = []
for p in range(2, 21):
eps.append(0.25*(p-1))
min_samples = list(range(1,21))
clust = []
silhouette = []
for e in eps:
for m in min_samples:
dbscan = DBSCAN(eps=e, min_samples=m)
dbscan_labels = dbscan.fit_predict(bart_standardized)
estim = len(set(dbscan_labels))
if estim > 1:
sil = sklearn.metrics.silhouette_score(bart_standardized, dbscan_labels)
clust.append(estim)
silhouette.append(sil)
silhouette_df = pd.DataFrame({"Clusters": clust, "Silhouette Score": silhouette})
plt.figure()
sns.lineplot(data= silhouette_df, x="Clusters", y="Silhouette Score")
eps = []
for p in range(2, 21):
eps.append(0.25*(p-1))
min_samples = list(range(1,21))
clust = []
silhouette = []
for e in eps:
for m in min_samples:
dbscan = DBSCAN(eps=e, min_samples=m)
dbscan_labels = dbscan.fit_predict(bart_standardized)
estim = len(set(dbscan_labels))
if estim > 1:
sil = sklearn.metrics.silhouette_score(bart_standardized, dbscan_labels)
clust.append(estim)
silhouette.append(sil)
silhouette_df = pd.DataFrame({"Clusters": clust, "Silhouette Score": silhouette})
plt.figure()
sns.lineplot(data= silhouette_df, x="Clusters", y="Silhouette Score")
from sklearn.cluster import DBSCAN
eps = [0.25 * (p - 1) for p in range(2, 21)]
# Generate values for min_samples
min_samples = list(range(1, 21))
# Lists to store results
clust = []
silhouette = []
# Perform DBSCAN with different eps and min_samples
for e in eps:
for m in min_samples:
dbscan = DBSCAN(eps=e, min_samples=m)
dbscan_labels = dbscan.fit_predict(bart_standardized)
estim = len(set(dbscan_labels))
if estim > 1:
sil = sklearn.metrics.silhouette_score(bart_standardized, dbscan_labels)
clust.append(estim)
silhouette.append(sil)
# Create a DataFrame for visualization
silhouette_df = pd.DataFrame({"Clusters": clust, "Silhouette Score": silhouette})
# Plot the results
plt.figure()
sns.lineplot(data=silhouette_df, x="Clusters", y="Silhouette Score")
plt.title('Silhouette Score vs. Number of Clusters (DBSCAN)')
plt.xlabel('Number of Clusters')
plt.ylabel('Silhouette Score')
plt.show()
import numpy as np
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
import sklearn
bart = pd.read_csv('../data/bart_dimensionality.csv')
remove_target = ['Made_Tournament']
bart.drop(columns= 'Made_Tournament', inplace=True)
from sklearn.cluster import KMeans, MeanShift, AgglomerativeClustering, Birch, DBSCAN
from sklearn.metrics import silhouette_score
import warnings
warnings.filterwarnings('ignore')
scaler= StandardScaler()
bart_standardized = scaler.fit_transform(bart)
clusters = list(range(2,11))
inertia = []
distortion_val = []
silhouette_scores = []
for c in clusters:
kmeans = KMeans(n_clusters= c)
kmeans.fit(bart_standardized)
distortion = sum(np.min(kmeans.transform(bart_standardized), axis= 1)) / bart_standardized.shape[0]
distortion_val.append(distortion)
inertia.append(kmeans.inertia_)
silhouette_scores.append(silhouette_score(bart_standardized, kmeans.labels_))
results_df = pd.DataFrame({"Cluster": clusters, "Distortion": distortion_val, "Inertia": inertia, 'Silhouette Score': silhouette_scores})
results_df
import matplotlib.pyplot as plt
# Plotting Distortion
plt.figure(figsize=(8, 5))
plt.plot(results_df['Cluster'], results_df['Distortion'], marker='o')
plt.title('Distortion')
plt.xlabel('Number of Clusters')
plt.ylabel('Distortion')
plt.show()
#Plotting Inertia
plt.figure(figsize=(8, 5))
plt.plot(results_df['Cluster'], results_df['Inertia'], marker='o', color='orange')
plt.title('Inertia')
plt.xlabel('Number of Clusters')
plt.ylabel('Inertia')
plt.show()
plt.figure(figsize=(8, 5))
plt.plot(results_df['Cluster'], results_df['Silhouette Score'], marker='o', color='green')
plt.title('Silhouette Score')
plt.xlabel('Number of Clusters')
plt.ylabel('Silhouette Score')
plt.show()
pca_components = pd.read_csv("../data/pca_components.csv")
pca = PCA(n_components=3)
bart_pca = pca.fit_transform(bart_standardized)
components = pca.components_
kmean = KMeans(n_clusters=2, random_state=101)
kmean.fit(bart_standardized)
labels = kmean.labels_
pca_df = pd.DataFrame(data=bart_pca, columns=['PCA1', 'PCA2', 'PCA3'])
pca_df['Cluster'] = labels
plt.figure(figsize=(10, 6))
sns.scatterplot(x='PCA1', y='PCA2', hue='Cluster', data=pca_df, palette='viridis', edgecolor='w', s=80)
plt.title('K-Means Clusters in PCA Space (First Two Components)')
plt.xlabel('PCA Component 1')
plt.ylabel('PCA Component 2')
plt.show()
pca_df['Cluster'] = pca_df['Cluster'].astype(str)
fig = px.scatter_3d(pca_df, x='PCA1', y='PCA2', z='PCA3', color='Cluster', symbol='Cluster', opacity=0.7, size_max=10, title='3D Scatter Plot of PC1, PC2, and PC3 with Cluster Labels', labels={'0': 'Principal Component 1 (PC1)', '1': 'Principal Component 2 (PC2)','2': 'Principal Component 3 (PC3)', 'color': 'Cluster'}, color_discrete_sequence=['blue', 'green'])
fig.update_layout(scene=dict(annotations=[dict(x=0, y=0, z=0, text='Cluster', showarrow=False)]))
fig.update_layout(scene=dict(xaxis=dict(title_font=dict(size=16)),
yaxis=dict(title_font=dict(size=16)),
zaxis=dict(title_font=dict(size=16))))
fig.show()
