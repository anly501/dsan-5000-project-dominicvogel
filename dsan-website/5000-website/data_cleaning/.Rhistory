fish_data <- read.csv("./FishMercury.csv")
fish_data <- read.csv("./FishMercury.csv")
hboxplot(fish_data$Mercury, main= "Mercury Levels in Fish", xlab = "Mercury")
fish_data <- read.csv("./FishMercury.csv")
boxplot(fish_data$Mercury, main= "Mercury Levels in Fish", xlab = "Mercury")
fish_data <- read.csv("./FishMercury.csv")
hist(fish_data$Mercury, main= "Mercury Levels in Fish", xlab = "Mercury")
fish_data <- read.csv("./FishMercury.csv")
hist(fish_data$Mercury, main= "Mercury Levels in Fish", xlab = "Mercury", breaks= 10)
fish_data <- read.csv("./FishMercury.csv")
hist(fish_data$Mercury, main= "Mercury Levels in Fish", xlab = "Mercury", breaks= 30)
set.seed(101)
n <- 100
NN <- 10000
merc <- numeric(NN)
for (i in 1:NN) {
mercsamp <- sample(fish_data$Mercury, n, replace = TRUE)
mercmean <- mean(mercsamp)
merc[i] <- mercmean
}
set.seed(101)
n <- 100
NN <- 10000
merc <- numeric(NN)
for (i in 1:NN) {
mercsamp <- sample(fish_data$Mercury, n, replace = TRUE)
mercmean <- mean(mercsamp)
merc[i] <- mercmean
}
bootstrap_mean <- mean(merc)
bootstrap_se <- sd(merc)
bootstrap_ci <- quantile(merc, c(0.025, 0.975))
cat("Bootstrap Sampling Mean:", bootstrap_mean, "\n")
cat("Bootstrap Standard Error:", bootstrap_se, "\n")
cat("95% Bootstrap Percentile Interval:", bootstrap_ci[1], "-", bootstrap_ci[2], "\n")
threshold <- 3
outliers <- fish_data$Mercury > (data_mean + threshold * data_sd) |
fish_data$Mercury < (data_mean - threshold * data_sd)
data_mean <- mean(fish_data$Mercury)
data_sd <- sd(fish_data$Mercury)
threshold <- 3
outliers <- fish_data$Mercury > (data_mean + threshold * data_sd) |
fish_data$Mercury < (data_mean - threshold * data_sd)
cleaned_fish <- fish_data[!outliers, ]
cat("Outliers:")
print(fish_data[outliers, ])
cat("\nCleaned Data:")
print(cleaned_data)
data_mean <- mean(fish_data$Mercury)
data_sd <- sd(fish_data$Mercury)
threshold <- 3
outliers <- fish_data$Mercury > (data_mean + threshold * data_sd) |
fish_data$Mercury < (data_mean - threshold * data_sd)
cleaned_fish <- fish_data[!outliers, ]
cat("Outliers:")
print(fish_data[outliers, ])
cat("\nCleaned Data:")
print(cleaned_fish)
set.seed(101)
n <- 100
NN <- 10000
merc <- numeric(NN)
for (i in 1:NN) {
mercsamp <- sample(cleaned_fish$Mercury, n, replace = TRUE)
mercmean <- mean(mercsamp)
merc[i] <- mercmean
}
data_mean <- mean(fish_data$Mercury)
data_sd <- sd(fish_data$Mercury)
threshold <- 3
outliers <- fish_data$Mercury > (data_mean + threshold * data_sd) |
fish_data$Mercury < (data_mean - threshold * data_sd)
cleaned_fish <- fish_data[-outliers, ]
cat("Outliers:")
print(fish_data[outliers, ])
set.seed(101)
n <- 100
NN <- 10000
merc <- numeric(NN)
for (i in 1:NN) {
mercsamp <- sample(cleaned_fish$Mercury, n, replace = TRUE)
mercmean <- mean(mercsamp)
merc[i] <- mercmean
}
data_mean <- mean(cleaned_fish$Mercury)
data_mean <- mean(fish_data$Mercury)
data_sd <- sd(fish_data$Mercury)
threshold <- 3
outliers <- fish_data$Mercury > (data_mean + threshold * data_sd) |
fish_data$Mercury < (data_mean - threshold * data_sd)
cleaned_fish <- fish_data[-outliers, , drop = FALSE]
cat("Outliers:")
print(fish_data[outliers, ])
data_mean <- mean(fish_data$Mercury)
data_sd <- sd(fish_data$Mercury)
threshold <- 3
outliers <- fish_data$Mercury > (data_mean + threshold * data_sd) |
fish_data$Mercury < (data_mean - threshold * data_sd)
cleaned_fish <- fish_data[-outliers, , drop = FALSE]
cat("Outliers:")
print(fish_data[outliers, ])
cleaned_fish
data_mean <- mean(fish_data$Mercury)
data_sd <- sd(fish_data$Mercury)
threshold <- 3
outliers <- fish_data$Mercury > (data_mean + threshold * data_sd) |
fish_data$Mercury < (data_mean - threshold * data_sd)
cleaned_fish <- fish_data[-outliers, , drop = FALSE]
cat("Outliers:")
print(fish_data[outliers, ])
set.seed(101)
n <- 100
NN <- 10000
merc <- numeric(NN)
for (i in 1:NN) {
mercsamp <- sample(cleaned_fish$Mercury, n, replace = TRUE)
mercmean <- mean(mercsamp)
merc[i] <- mercmean
}
bootstrap_mean <- mean(merc)
bootstrap_se <- sd(merc)
bootstrap_ci <- quantile(merc, c(0.025, 0.975))
cat("Bootstrap Sampling Mean:", bootstrap_mean, "\n")
cat("Bootstrap Standard Error:", bootstrap_se, "\n")
cat("95% Bootstrap Percentile Interval:", bootstrap_ci[1], "-", bootstrap_ci[2], "\n")
cereals_data <- read.csv("./Cereals.csv")
two_way <- table(cereals_data$)
cereals_data <- read.csv("./Cereals.csv")
two_way <- table(cereals_data$Age, cereals_data$Shelf)
print(two_way)
#Null - there is no relationship between age and shelf height for cereal.
#alternative- there is a relationship between age and shelf height for cereals.
chisq.test(two_way)
#Null - there is no relationship between age and shelf height for cereal.
#alternative- there is a relationship between age and shelf height for cereals.
# Load the necessary libraries
library(dplyr)
# Create a two-way table using dplyr
two_way_table <- cereals_data %>%
count(Age, Shelf)
# Convert the table to a matrix
observed_table <- as.matrix(two_way_table[, c("bottom", "middle", "top")])
#Null - there is no relationship between age and shelf height for cereal.
#alternative- there is a relationship between age and shelf height for cereals.
# Load the necessary libraries
library(dplyr)
# Create a two-way table using table()
two_way_table <- table(cereals_data$Age, cereals_data$Shelf)
# Perform the chi-square test
chi_square_result <- chisq.test(two_way_table)
# Print the two-way table
print(two_way_table)
# Print the chi-square test result
print(chi_square_result)
#Null - there is no relationship between age and shelf height for cereal.
#alternative- there is a relationship between age and shelf height for cereals.
chisq.test(two_way)
chi_square_result <- chisq.test(two_way_table, simulate.p.value = TRUE)
chi_square_result
chi_square_result <- chisq.test(two_way)
chi_square_result$expected
fisher.test(two_way)
chisq.test(two_way, correct = TRUE)
chisq.test(two_way, correct = TRUE, yates.correct= TRUE)
chisq.test(two_way, correct = TRUE)
chisq.test(two_way, correct = TRUE)
chisq.test(two_way, correct = TRUE)
chisq.test(two_way, correct = TRUE) #Gives the same result (Yates is auto applied to 2x2 tables)
chisq.test(two_way, correct = TRUE) #Gives the same result (Yates is auto applied to 2x2 tables)
chisq.test(two_way, correct = TRUE) #Gives the same result (Yates is auto applied to 2x2 tables)
artists <- read.csv("./Artists.csv")
library(ggplot2)
ggplot(artists, aes(x=ar))
artists <- read.csv("./Artists.csv")
library(ggplot2)
ggplot(artists, aes(x=artist_name, y= liveliness, color= artist_name)) + geom_point(position = position_dodge(width = 0.5)) + labs(x="Artist")
artists <- read.csv("./Artists.csv")
library(ggplot2)
ggplot(artists, aes(x=artist_name, y= liveness, color= artist_name)) + geom_point(position = position_dodge(width = 0.5)) + labs(x="Artist")
artists <- read.csv("./Artists.csv")
library(ggplot2)
artists <- artists[artists$artist_name %in% c("Beyonce", "Taylor Swift"),]
ggplot(artists, aes(x=artist_name, y= liveness, color= artist_name)) + geom_point(position = position_dodge(width = 0.5)) + labs(x="Artist")
artists <- read.csv("./Artists.csv")
library(ggplot2)
artists <- artists[artists$artist_name %in% c("Beyoncé", "Taylor Swift"),]
ggplot(artists, aes(x=artist_name, y= liveness, color= artist_name)) + geom_point(position = position_dodge(width = 0.5)) + labs(x="Artist")
B <- subset(artists, select = liveness, subset = artist_name == "Beyoncé", drop = T)
TS <- subset(artists, select = liveness, subset = artist_name == "Taylor Swift", drop = T)
t.test(B, TS, alternative = "greater")
artists <- read.csv("./Artists.csv")
library(ggplot2)
artists <- artists[artists$artist_name %in% c("Beyoncé", "Taylor Swift"),]
ggplot(Artists2, aes(x= artist_name, y= liveness, fill = artist_name)) + geom_boxplot()
artists <- read.csv("./Artists.csv")
library(ggplot2)
artists <- artists[artists$artist_name %in% c("Beyoncé", "Taylor Swift"),]
ggplot(artists, aes(x= artist_name, y= liveness, fill = artist_name)) + geom_boxplot()
boot.mean.B <- replicate(10000, mean(sample(B, replace = T)))
boot.mean.TS <- replicate(10000, mean(sample(TS, replace = T)))
boot.mean.ratio <- boot.mean.JL/boot.mean.TS
boot.mean.B <- replicate(10000, mean(sample(B, replace = T)))
boot.mean.TS <- replicate(10000, mean(sample(TS, replace = T)))
boot.mean.ratio <- boot.mean.B/boot.mean.TS
quantile(boot.mean.ratio, c(.025, .975))
sample_ratio <- mean(B)/mean(TS)
bias <- mean(boot.mean.ratio) - sample_ratio
bias
set.seed(101)
boot.mean.B <- replicate(10000, mean(sample(B, replace = T)))
boot.mean.TS <- replicate(10000, mean(sample(TS, replace = T)))
boot.mean.ratio <- boot.mean.B/boot.mean.TS
quantile(boot.mean.ratio, c(.025, .975))
sample_ratio <- mean(B)/mean(TS)
bias <- mean(boot.mean.ratio) - sample_ratio
bias
set.seed(101)
sample_ratio <- mean(B)/mean(TS)
bias <- mean(boot.mean.ratio) - sample_ratio
bias
calculate_t_confidence_interval <- function(sample_mean, sample_sd, sample_size, confidence_level) {
df <- sample_size - 1
alpha <- 1 - confidence_level
t_critical <- qt(1 - alpha / 2, df)
margin_of_error <- t_critical * (sample_sd / sqrt(sample_size))
lower_bound <- sample_mean - margin_of_error
upper_bound <- sample_mean + margin_of_error
result <- list(
lower_bound = lower_bound,
upper_bound = upper_bound,
margin_of_error = margin_of_error
)
return(result)
}
sample_mean <- 18.05
sample_sd <- 5
sample_size <- 20
confidence_level <- 0.9
ci_result <- calculate_t_confidence_interval(sample_mean, sample_sd, sample_size, confidence_level)
cat("90% Confidence Interval for the Mean:", ci_result$lower_bound, "-", ci_result$upper_bound, "\n")
cat("Margin of Error:", ci_result$margin_of_error, "\n")
calculate_t_confidence_interval <- function(sample_mean, sample_sd, sample_size, confidence_level) {
df <- sample_size - 1
alpha <- 1 - confidence_level
t_critical <- qt(1 - alpha / 2, df)
margin_of_error <- t_critical * (sample_sd / sqrt(sample_size))
lower_bound <- sample_mean - margin_of_error
upper_bound <- sample_mean + margin_of_error
result <- list(
lower_bound = lower_bound,
upper_bound = upper_bound
)
return(result)
}
sample_mean <- 18.05
sample_sd <- 5
sample_size <- 20
confidence_level <- 0.9
ci_result <- calculate_t_confidence_interval(sample_mean, sample_sd, sample_size, confidence_level)
cat("90% Confidence Interval for the Mean:", ci_result$lower_bound, "-", ci_result$upper_bound, "\n")
reticulate::repl_python()
full_barttorvik = pd.read_csv("../data/cbb.csv")
quit
#| output: false
library(ncaahoopR)
creighton <- get_pbp("Creighton", "2022-23")
write.csv(creighton, file = "../data/creighton_2022_23.csv", row.names = FALSE)
head(creighton[, 1:5], 10)
cat("Number of rows:", nrow(creighton), "\n")
cat("Number of columns:", ncol(creighton), "\n")
library(dplyr)
creighton_change <- creighton %>% filter(scoring_play == TRUE,
win_prob >= lag(win_prob, default = first(win_prob)) + .2 |
win_prob <= lag(win_prob, default = first(win_prob)) - .2)
head(creighton_change[, 1:5], 10)
reticulate::repl_python()
#Imports
import pandas as pd
import numpy as np
import requests
import csv
#| output: false
csv_url = "http://barttorvik.com/2023_team_results.csv"
local_filename = "barttorvik_2023.csv"
response = requests.get(csv_url)
if response.status_code == 200:
with open(local_filename, 'wb') as outfile:
outfile.write(response.content)
else:
print("Failed to retrieve the file. Status code:", response.status_code)
barttorvik_df = pd.read_csv("barttorvik_2023.csv")
barttorvik_df.columns = ['Team', 'Conf', 'Record', 'AdjOE', 'OERank', 'AdjDE', 'DERank', 'Barthag', 'Rank', 'ProjW', 'ProjL', 'ProConW', 'ProConL', 'ConRec', 'SOS', 'NCSOS', 'Consos', 'ProjSOS', 'ProjNonconSOS', 'ProjConSOS', 'EliteSOS', 'EliteNonconSOS', 'OppOE', 'OppDE', 'OppProjOE', 'OppProjDE', 'ConAdjOE','ConAdjDE', 'QualO', 'QualD', 'QualBarthag', 'QualGames', 'FUN', 'ConPF','ConPA', 'ConPoss', 'ConOE', 'ConDE', 'ConSOSRemain', 'ConfWinPct', 'WAB', 'WABRk', 'FunRk', 'AdjT']
print(barttorvik_df.head())
barttorvik_df.to_csv("../data/barttorvik_2023.csv", index= False)
full_barttorvik = pd.read_csv("../data/cbb.csv")
quit
#| echo: false
library(hoopR)
user_email <- Sys.getenv("KP_USER")
user_pw <- Sys.getenv("KP_PW")
has_kp_user_and_pw()
reticulate::repl_python()
kenpom_df = pd.read_csv("../data/summary23.csv")
print(kenpom_df.head())
full_barttorvik = pd.read_csv("../data/cbb.csv")
values_to_change = ["Champions", "2ND", "F4", "E8", "S16", "R32", "R64", "N/A"]
new_values = [7, 6, 5, 4, 3, 2, 1, 0]
full_barttorvik.loc[full_barttorvik["POSTSEASON"].isin(values_to_change), "POSTSEASON"] = new_values
full_barttorvik.loc[full_barttorvik["SEED"] == "NA", "SEED"] == 17
full_barttorvik.to_csv("../data/cbb.csv", index= False)
full_barttorvik = pd.read_csv("../data/cbb.csv")
values_to_change = ["Champions", "2ND", "F4", "E8", "S16", "R32", "R64", "N/A"]
new_values = [7, 6, 5, 4, 3, 2, 1, 0]
full_barttorvik.loc[full_barttorvik["POSTSEASON"].isin(values_to_change), "POSTSEASON"] = new_values
full_barttorvik.loc[full_barttorvik["SEED"] == "NA", "SEED"] == 17
full_barttorvik.to_csv("../data/cbb.csv", index= False)
full_barttorvik = pd.read_csv("../data/cbb.csv")
values_to_change = ["Champions", "2ND", "F4", "E8", "S16", "R32", "R64", "N/A"]
new_values = [7, 6, 5, 4, 3, 2, 1, 0]
full_barttorvik.loc[full_barttorvik["POSTSEASON"].isin(values_to_change), "POSTSEASON"] = new_values
full_barttorvik.loc[full_barttorvik["SEED"] == "NA", "SEED"] = 17
full_barttorvik.to_csv("../data/cbb.csv", index= False)
full_barttorvik = pd.read_csv("../data/cbb.csv")
values_to_change = ["Champions", "2ND", "F4", "E8", "S16", "R32", "R64", "N/A"]
new_values = [7, 6, 5, 4, 3, 2, 1, 0]
full_barttorvik.loc[full_barttorvik["POSTSEASON"].isin(values_to_change), "POSTSEASON"] = new_values
full_barttorvik.loc[full_barttorvik["SEED"] == "NA", "SEED"] = 17
full_barttorvik.to_csv("../data/cbb.csv", index= False)
full_barttorvik = pd.read_csv("../data/cbb.csv")
values_to_change = ["Champions", "2ND", "F4", "E8", "S16", "R32", "R64", "N/A"]
new_values = [7, 6, 5, 4, 3, 2, 1, 0]
print("Length of values_to_change:", len(values_to_change))
print("Length of new_values:", len(new_values))
full_barttorvik.loc[full_barttorvik["POSTSEASON"].isin(values_to_change), "POSTSEASON"] = new_values
full_barttorvik.loc[full_barttorvik["SEED"] == "NA", "SEED"] = 17
full_barttorvik.to_csv("../data/cbb.csv", index= False)
full_barttorvik = pd.read_csv("../data/cbb.csv")
values_to_change = ["Champions", "2ND", "F4", "E8", "S16", "R32", "R64", "N/A"]
new_values = [7, 6, 5, 4, 3, 2, 1, 0]
full_barttorvik["POSTSEASON"] = full_barttorvik["POSTSEASON"].replace(values_to_change, new_values)
full_barttorvik["SEED"] = full_barttorvik["SEED"].replace("NA", 17)
full_barttorvik.to_csv("../data/cbb.csv", index=False)
full_barttorvik = pd.read_csv("../data/cbb.csv")
values_to_change = ["Champions", "2ND", "F4", "E8", "S16", "R32", "R64", "N/A"]
new_values = [7, 6, 5, 4, 3, 2, 1, 0]
full_barttorvik["POSTSEASON"] = full_barttorvik["POSTSEASON"].replace(values_to_change, new_values)
full_barttorvik["SEED"] = full_barttorvik["SEED"].replace("NA", 17)
filtered_2013 = full_barttorvik[full_barttorvik['Year'] == 2013]
filtered_2014 = full_barttorvik[full_barttorvik['Year'] == 2014]
filtered_2015 = full_barttorvik[full_barttorvik['Year'] == 2015]
filtered_2016 = full_barttorvik[full_barttorvik['Year'] == 2016]
filtered_2017 = full_barttorvik[full_barttorvik['Year'] == 2017]
filtered_2018 = full_barttorvik[full_barttorvik['Year'] == 2018]
filtered_2019 = full_barttorvik[full_barttorvik['Year'] == 2019]
filtered_2020 = full_barttorvik[full_barttorvik['Year'] == 2020]
filtered_2021 = full_barttorvik[full_barttorvik['Year'] == 2021]
filtered_2022 = full_barttorvik[full_barttorvik['Year'] == 2022]
filtered_2023 = full_barttorvik[full_barttorvik['Year'] == 2023]
filtered_2013['YearRank'] = filtered_2013['BARTHAG'].rank(ascending=False).astype(int)
full_barttorvik.loc[full_barttorvik['YearRank'] == 2013, 'YearRank'] = filtered_data['YearRank']
full_barttorvik.to_csv("../data/cbb.csv", index=False)
full_barttorvik = pd.read_csv("../data/cbb.csv")
values_to_change = ["Champions", "2ND", "F4", "E8", "S16", "R32", "R64", "N/A"]
new_values = [7, 6, 5, 4, 3, 2, 1, 0]
full_barttorvik["POSTSEASON"] = full_barttorvik["POSTSEASON"].replace(values_to_change, new_values)
full_barttorvik["SEED"] = full_barttorvik["SEED"].replace("NA", 17)
filtered_2013 = full_barttorvik[full_barttorvik['Year'] == 2013]
filtered_2014 = full_barttorvik[full_barttorvik['Year'] == 2014]
filtered_2015 = full_barttorvik[full_barttorvik['Year'] == 2015]
filtered_2016 = full_barttorvik[full_barttorvik['Year'] == 2016]
filtered_2017 = full_barttorvik[full_barttorvik['Year'] == 2017]
filtered_2018 = full_barttorvik[full_barttorvik['Year'] == 2018]
filtered_2019 = full_barttorvik[full_barttorvik['Year'] == 2019]
filtered_2020 = full_barttorvik[full_barttorvik['Year'] == 2020]
filtered_2021 = full_barttorvik[full_barttorvik['Year'] == 2021]
filtered_2022 = full_barttorvik[full_barttorvik['Year'] == 2022]
filtered_2023 = full_barttorvik[full_barttorvik['Year'] == 2023]
filtered_2013['YearRank'] = filtered_2013['BARTHAG'].rank(ascending=False).astype(int)
full_barttorvik.loc[full_barttorvik['YearRank'] == 2013, 'YearRank'] = filtered_data['YearRank']
full_barttorvik.to_csv("../data/cbb.csv", index=False)
full_barttorvik = pd.read_csv("../data/cbb.csv")
values_to_change = ["Champions", "2ND", "F4", "E8", "S16", "R32", "R64", "N/A"]
new_values = [7, 6, 5, 4, 3, 2, 1, 0]
full_barttorvik["POSTSEASON"] = full_barttorvik["POSTSEASON"].replace(values_to_change, new_values)
full_barttorvik["SEED"] = full_barttorvik["SEED"].replace("NA", 17)
filtered_2013 = full_barttorvik[full_barttorvik['Year'] == 2013]
filtered_2014 = full_barttorvik[full_barttorvik['Year'] == 2014]
filtered_2015 = full_barttorvik[full_barttorvik['Year'] == 2015]
filtered_2016 = full_barttorvik[full_barttorvik['Year'] == 2016]
filtered_2017 = full_barttorvik[full_barttorvik['Year'] == 2017]
filtered_2018 = full_barttorvik[full_barttorvik['Year'] == 2018]
filtered_2019 = full_barttorvik[full_barttorvik['Year'] == 2019]
filtered_2020 = full_barttorvik[full_barttorvik['Year'] == 2020]
filtered_2021 = full_barttorvik[full_barttorvik['Year'] == 2021]
filtered_2022 = full_barttorvik[full_barttorvik['Year'] == 2022]
filtered_2023 = full_barttorvik[full_barttorvik['Year'] == 2023]
filtered_2013['YearRank'] = filtered_2013['BARTHAG'].rank(ascending=False).astype(int)
full_barttorvik.loc[full_barttorvik['YearRank'] == 2013, 'YearRank'] = filtered_2013['YearRank']
full_barttorvik.to_csv("../data/cbb.csv", index=False)
full_barttorvik = pd.read_csv("../data/cbb.csv")
values_to_change = ["Champions", "2ND", "F4", "E8", "S16", "R32", "R64", "N/A"]
new_values = [7, 6, 5, 4, 3, 2, 1, 0]
full_barttorvik["POSTSEASON"] = full_barttorvik["POSTSEASON"].replace(values_to_change, new_values)
full_barttorvik["SEED"] = full_barttorvik["SEED"].replace("NA", 17)
filtered_2013 = full_barttorvik[full_barttorvik['YEAR'] == 2013]
filtered_2014 = full_barttorvik[full_barttorvik['YEAR'] == 2014]
filtered_2015 = full_barttorvik[full_barttorvik['YEAR'] == 2015]
filtered_2016 = full_barttorvik[full_barttorvik['YEAR'] == 2016]
filtered_2017 = full_barttorvik[full_barttorvik['YEAR'] == 2017]
filtered_2018 = full_barttorvik[full_barttorvik['YEAR'] == 2018]
filtered_2019 = full_barttorvik[full_barttorvik['YEAR'] == 2019]
filtered_2020 = full_barttorvik[full_barttorvik['YEAR'] == 2020]
filtered_2021 = full_barttorvik[full_barttorvik['YEAR'] == 2021]
filtered_2022 = full_barttorvik[full_barttorvik['YEAR'] == 2022]
filtered_2023 = full_barttorvik[full_barttorvik['YEAR'] == 2023]
filtered_2013['YearRank'] = filtered_2013['BARTHAG'].rank(ascending=False).astype(int)
full_barttorvik.loc[full_barttorvik['YearRank'] == 2013, 'YearRank'] = filtered_2013['YearRank']
full_barttorvik.to_csv("../data/cbb.csv", index=False)
full_barttorvik = pd.read_csv("../data/cbb.csv")
values_to_change = ["Champions", "2ND", "F4", "E8", "S16", "R32", "R64", "N/A"]
new_values = [7, 6, 5, 4, 3, 2, 1, 0]
full_barttorvik["POSTSEASON"] = full_barttorvik["POSTSEASON"].replace(values_to_change, new_values)
full_barttorvik["SEED"] = full_barttorvik["SEED"].replace("NA", 17)
for year in range(2013, 2024):
filtered_data = full_barttorvik[full_barttorvik['YEAR'] == year]
full_barttorvik.loc[full_barttorvik['YEAR'] == year, 'YearRank'] = filtered_data['BARTHAG'].rank(ascending=False).astype(int)
full_barttorvik.to_csv("../data/cbb.csv", index=False)
full_barttorvik = pd.read_csv("../data/cbb.csv")
values_to_change = ["Champions", "2ND", "F4", "E8", "S16", "R32", "R64", "N/A"]
new_values = [7, 6, 5, 4, 3, 2, 1, 0]
full_barttorvik["POSTSEASON"] = full_barttorvik["POSTSEASON"].replace(values_to_change, new_values)
full_barttorvik["SEED"] = full_barttorvik["SEED"].replace("NA", 17)
for year in range(2013, 2024):
filtered_data = full_barttorvik[full_barttorvik['YEAR'] == year]
full_barttorvik.loc[full_barttorvik['YEAR'] == year, 'YearRank'] = filtered_data['BARTHAG'].rank(ascending=False).astype(int)
full_barttorvik['TotalRank'] = full_barttorvik['BARTHAG'].rank(ascending=False).astype(int)
full_barttorvik.to_csv("../data/cbb.csv", index=False)
full_barttorvik = pd.read_csv("../data/cbb.csv")
values_to_change = ["Champions", "2ND", "F4", "E8", "S16", "R32", "R64", "N/A"]
new_values = [7, 6, 5, 4, 3, 2, 1, 0]
full_barttorvik["POSTSEASON"] = full_barttorvik["POSTSEASON"].replace(values_to_change, new_values)
full_barttorvik["SEED"] = full_barttorvik["SEED"].replace("NA", 17)
for year in range(2013, 2024):
filtered_data = full_barttorvik[full_barttorvik['YEAR'] == year]
full_barttorvik.loc[full_barttorvik['YEAR'] == year, 'YearOverallRank'] = filtered_data['BARTHAG'].rank(ascending=False).astype(int)
full_barttorvik.loc[full_barttorvik['YEAR'] == year, 'YearOffenseRank'] = filtered_data['ADJOE'].rank(ascending=False).astype(int)
full_barttorvik.loc[full_barttorvik['YEAR'] == year, 'YearDefenseRank'] = filtered_data['ADJOE'].rank(ascending=False).astype(int)
full_barttorvik['TotalOverallRank'] = full_barttorvik['BARTHAG'].rank(ascending=False).astype(int)
full_barttorvik['TotalOffenseRank'] = full_barttorvik['ADJOE'].rank(ascending=False).astype(int)
full_barttorvik['TotalDefenseRank'] = full_barttorvik['ADJDE'].rank(ascending=False).astype(int)
full_barttorvik.to_csv("../data/cbb.csv", index=False)
import pandas as pd
full_barttorvik <- pd.read_csv("../data/cbb.csv")
import pandas as pd
full_barttorvik = pd.read_csv("../data/cbb.csv")
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
full_barttorvik = pd.read_csv("../data/cbb.csv")
filt1 = full_barttorvik[full_barttorvik['POSTSEASON'] == 7]
sns.set(style="whitegrid")
plt.figure(figsize=(10, 6))
sns.scatterplot(x='ADJDE', y='ADJOE', data=filtered_data, hue='POSTSEASON', palette='viridis',
legend='full', alpha=0.7)
plt.title('Scatter Plot of ADJOE against ADJDE for last 10 champions')
plt.xlabel('Adjusted Defensive Efficiency (ADJDE)')
plt.ylabel('Adjusted Offensive Efficiency (ADJOE)')
plt.show()
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
full_barttorvik = pd.read_csv("../data/cbb.csv")
filt1 = full_barttorvik[full_barttorvik['POSTSEASON'] == 7]
sns.set(style="whitegrid")
plt.figure(figsize=(10, 6))
sns.scatterplot(x='ADJDE', y='ADJOE', data=filtered_data, hue='POSTSEASON', palette='viridis',
legend='full', alpha=0.7)
plt.title('Scatter Plot of ADJOE against ADJDE for last 10 champions')
plt.xlabel('Adjusted Defensive Efficiency (ADJDE)')
plt.ylabel('Adjusted Offensive Efficiency (ADJOE)')
plt.show()
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
